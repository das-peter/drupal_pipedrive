<?php
/**
 * @file
 * Pipedrive Module File.
 */

require_once 'pipedrive.api.inc';

/**
 * Implements hook_libraries_info().
 *
 * @see pipedrive_libraries_info_pipedrive_predetect()
 */
function pipedrive_libraries_info() {
  // The php files here are the ones required in a specific loading order, all
  // others are automatically detected by
  // pipedrive_libraries_info_pipedrive_predetect().
  $libraries['pipedrive'] = array(
    'name' => 'Pipedrive',
    'vendor url' => 'https://github.com/TTRGroup/pipedrive-api-php',
    'download url' => 'https://github.com/TTRGroup/pipedrive-api-php/archive/master.zip',
    'version arguments' => array(
      'file' => 'composer.json',
      'pattern' => '/((?:\d+\.?){2,3})/',
    ),
    'files' => array(
      'php' => array(
        'src/Benhawker/Pipedrive/Exceptions/PipedriveException.php',
        'src/Benhawker/Pipedrive/Exceptions/PipedriveApiError.php',
        'src/Benhawker/Pipedrive/Exceptions/PipedriveHttpError.php',
        'src/Benhawker/Pipedrive/Exceptions/PipedriveMissingFieldError.php',
        'src/Benhawker/Pipedrive/Library/Activities.php',
        'src/Benhawker/Pipedrive/Library/Curl.php',
        'src/Benhawker/Pipedrive/Library/DealFields.php',
        'src/Benhawker/Pipedrive/Library/Deals.php',
        'src/Benhawker/Pipedrive/Library/Notes.php',
        'src/Benhawker/Pipedrive/Library/Organizations.php',
        'src/Benhawker/Pipedrive/Library/Persons.php',
        'src/Benhawker/Pipedrive/Library/Products.php',
        'src/Benhawker/Pipedrive/Pipedrive.php',
      ),
    ),
    'callbacks' => array(
      'pre-detect' => array(
        'pipedrive_libraries_info_pipedrive_predetect',
      ),
    ),
  );

  return $libraries;
}

/**
 * Dynamically add library files.
 *
 * Ideally this would be handled by a PSR-4 autoloader.
 * This adds automatically newly added files. However you've to declare some of
 * the files in pipedrive_libraries_info() to maintain the required order of
 * loading.
 *
 * @param array $library
 *   The library info.
 */
function pipedrive_libraries_info_pipedrive_predetect(&$library) {
  $library_path = DRUPAL_ROOT . '/' . $library['library path'];
  $itr = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($library_path));
  /** @var SplFileInfo $item */
  foreach ($itr as $item) {
    if ($item->isFile() && $item->getExtension() == 'php') {
      $file = str_replace('\\', '/', str_replace($library_path . DIRECTORY_SEPARATOR, '', $item->getPathname()));
      $library['files']['php'][$file] = array();
    }
  }
}

/**
 * Implements hook_menu().
 */
function pipedrive_menu() {

  $items = array();

  $items['admin/config/services/pipedrive'] = array(
    'title' => 'Pipedrive',
    'description' => 'Configure your Pipedrive account details',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pipedrive_account_settings_form'),
    'access arguments' => array('administer pipedrive'),
    'file' => 'pipedrive.admin.inc',
    'file path' => drupal_get_path('module', 'pipedrive'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
  );

  return $items;
}


/**
 * Implements hook_permission().
 */
function pipedrive_permission() {
  return array(
    'administer pipedrive' => array(
      'title' => t('Administer Pipedrive module'),
      'description' => t('Administer access to everything in module'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Return a list of available data type machine names.
 *
 * @return array
 *   List of pipedrive data type  machine names.
 *   Key is singular, value is plural.
 */
function pipedrive_data_types() {
  // Notes and products are not yet supported by the library.
  return array(
    'activity' => 'activities',
    'deal' => 'deals',
    'organization' => 'organizations',
    'person' => 'persons',
  );
}

/**
 * Return a list of available data types.
 *
 * @return array
 *   List of pipedrive data types.
 */
function pipedrive_data_type_options() {
  // Notes and products are not yet supported by the library.
  return array(
    'activities' => t('Activities', array(), array('context' => 'pipedrive')),
    'deals' => t('Deals', array(), array('context' => 'pipedrive')),
    // 'notes' => t('notes', array(), array('context' => 'pipedrive')),
    'organizations' => t('Organizations', array(), array('context' => 'pipedrive')),
    'persons' => t('Persons', array(), array('context' => 'pipedrive')),
    // 'products' => t('Products', array(), array('context' => 'pipedrive')),
  );
}

/**
 * Return an option list of available activity types.
 *
 * @return array
 *   List of pipedrive activity types.
 *
 * @TODO Extend the library to support /ActivityTypes.
 */
function pipedrive_activity_type_options() {
  return array(
    'call' => t('Call', array(), array('context' => 'pipedrive')),
    'meeting' => t('Meeting', array(), array('context' => 'pipedrive')),
    'task' => t('Task', array(), array('context' => 'pipedrive')),
    'deadline' => t('Deadline', array(), array('context' => 'pipedrive')),
    'email' => t('E-Mail', array(), array('context' => 'pipedrive')),
    'lunch' => t('Lunch', array(), array('context' => 'pipedrive')),
  );
}

/**
 * Return an option list of visibility types.
 *
 * @return array
 *   List of pipedrive visibility types.
 */
function pipedrive_visibility_options() {
  return array(
    '1' => t('Owner & followers (private)', array(), array('context' => 'pipedrive')),
    '3' => t('Entire company (shared)', array(), array('context' => 'pipedrive')),
  );
}

/**
 * Return an option list of available deal status.
 *
 * @return array
 *   List of pipedrive deal status types.
 */
function pipedrive_deal_status_options() {
  return array(
    'open' => t('Open', array(), array('context' => 'pipedrive')),
    'won' => t('Won', array(), array('context' => 'pipedrive')),
    'lost' => t('Lost', array(), array('context' => 'pipedrive')),
    'deleted' => t('Deleted', array(), array('context' => 'pipedrive')),
  );
}

/**
 * Implements hook_field_info().
 */
function pipedrive_field_info() {
  return array(
    'pipedrive' => array(
      'label' => 'Pipedrive',
      'description' => t('This field allows you to sync the entity it is attached to with pipedrive.'),
      'default_widget' => 'pipedrive_widget',
      'default_formatter' => 'pipedrive_default',
      'settings' => array(
        'pipedrive_type' => 'activity',
      ),
      'instance_settings' => array(
        'sync_delete' => TRUE,
      ),
      'property_type' => 'pipedrive',
      'property_callbacks' => array('pipedrive_property_info_callback'),
    ),
  );
}

/**
 * Callback to alter the property info of address fields.
 *
 * @see pipedrive_field_info().
 */
function pipedrive_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $name = $field['field_name'];
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$name];

  $property['type'] = ($field['cardinality'] != 1) ? 'list<pipedrive>' : 'pipedrive';
  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  $property['auto creation'] = 'pipedrive_auto_creation';
  $property['property info'] = pipedrive_data_property_info();

  unset($property['query callback']);
}

/**
 * Auto creation callback for an pipedrive value array.
 *
 * @see pipedrive_property_info_callback()
 */
function pipedrive_auto_creation($property_name, $context) {
  return pipedrive_default_values($context['field'], $context['instance']);
}

/**
 * Defines info for the properties of the address field data structure.
 */
function pipedrive_data_property_info($name = NULL) {
  // Build an array of basic property information for the address field.
  $properties = array(
    'id' => array(
      'label' => t('ID'),
      'type' => 'integer',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'last_sync' => array(
      'label' => t('Last sync'),
      'type' => 'date',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'status' => array(
      'label' => t('Status'),
      'type' => 'integer',
      'options list' => 'pipedrive_field_status_options',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'skip_sync' => array(
      'label' => t('Skip Sync'),
      'type' => 'boolean',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),
    'data' => array(
      'label' => t('Data'),
      'type' => 'struct',
      'getter callback' => 'entity_property_verbatim_get',
      'setter callback' => 'entity_property_verbatim_set',
    ),
  );

  return $properties;
}

/**
 * Options for the status property of the pipedrive field.
 */
function pipedrive_field_status_options() {
  return array(
    0 => t('Error'),
    1 => t('Success'),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function pipedrive_field_settings_form($field, $instance, $has_data) {
  $element['pipedrive_type'] = array(
    '#type' => 'select',
    '#title' => t('Pipedrive data type'),
    '#default_value' => $field['settings']['pipedrive_type'],
    '#options' => pipedrive_data_type_options(),
    '#disabled' => $has_data,
  );
  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Enforce field cardinality of 1.
 */
function pipedrive_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#field']['type'] == 'pipedrive') {
    $form['field']['cardinality']['#options'] = array(1 => 1);
  }
}

/**
 * Implements hook_field_instance_settings_form().
 */
function pipedrive_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];
  $form['sync_delete'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete pipedrive data when the entity is deleted.'),
    '#default_value' => !empty($settings['sync_delete']),
  );
  return $form;
}


/**
 * Implements hook_field_is_empty().
 */
function pipedrive_field_is_empty($item, $field) {
  return empty($item['id']);
}

/**
 * Implements hook_field_formatter_info().
 */
function pipedrive_field_formatter_info() {
  $formats = array(
    'pipedrive_default' => array(
      'label' => t('Pipedrive ID'),
      'description' => t('Display the pipedrive id.'),
      'field types' => array('pipedrive'),
    ),
    'pipedrive_summary' => array(
      'label' => t('Pipedrive summary'),
      'description' => t('Display a summary of the pipedrive sync state.'),
      'field types' => array('pipedrive'),
    ),
  );
  return $formats;
}

/**
 * Implements hook_field_formatter_view().
 */
function pipedrive_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'pipedrive_default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array('#markup' => $item['id']);
      }
      break;

    case 'pipedrive_summary':
      foreach ($items as $delta => $item) {
        $element[$delta]['id'] = array(
          '#type' => 'item',
          '#title' => t('Pipedrive ID'),
          '#markup' => $item['id'],
        );
        $element[$delta]['last_sync'] = array(
          '#type' => 'item',
          '#title' => t('Last Sync'),
          '#markup' => $item['last_sync'],
        );
        $element[$delta]['status'] = array(
          '#type' => 'item',
          '#title' => t('Status'),
          '#markup' => $item['status'],
        );
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function pipedrive_field_widget_info() {
  return array(
    'pipedrive_widget' => array(
      'label' => t('Pipedrive field'),
      'field types' => array('pipedrive'),
      'settings' => array('size' => 60),
    ),
  );
}

/**
 * Implements hook_field_widget_settings_form().
 */
function pipedrive_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];
  $form = array();
  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function pipedrive_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $base) {
  $element = $base;
  // @ToDo Add a field to manually trigger a sync?
  return $element;
}

/**
 * Implements hook_field_insert().
 */
function pipedrive_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  // Update and insert are handled the same way.
  pipedrive_field_update($entity_type, $entity, $field, $instance, $langcode, $items);
}

/**
 * Implements hook_field_update().
 */
function pipedrive_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $data_types = array_flip(pipedrive_data_types());
  // Check if the field is marked as to skip.
  // @TODO Keep the processing but skip just sync instead?
  if (!empty($items[0]['skip_sync'])) {
    return;
  }
  if (isset($data_types[$field['settings']['pipedrive_type']])) {
    $pipedrive_type = $data_types[$field['settings']['pipedrive_type']];
    $context = array(
      'entity_type' => $entity_type,
      'entity' => $entity,
      'field' => $field,
      'instance' => $instance,
      'langcode' => $langcode,
    );
    $sync_data = new stdClass();
    // Check if there's an id - if so add it to the sync data. Our field type
    // has and enforced cardinality of 1, no need for a loop.
    if (!empty($items[0]['id'])) {
      $sync_data->id = $items[0]['id'];
    }
    // If rules is available fire the related event. This provides a
    // configurable syncing mode.
    if (module_exists('rules')) {
      $wrapped_entity = entity_metadata_wrapper($entity_type, $entity);
      rules_invoke_event('pipedrive_field_sync_' . $pipedrive_type, $sync_data, $wrapped_entity);
    }
    // Let other modules act on this event too.
    module_invoke_all('pipedrive_field_sync', $pipedrive_type, $sync_data, $entity_type, $entity, $context);

    pipedrive_prepare_sync_data($sync_data);

    // If sync isn't skipped do it now.
    if (empty($sync_data->skip_sync) && !empty($sync_data)) {
      // Clean some data.
      unset($sync_data->skip_sync);

      try {
        // Load library and use it to save the sync data.
        $pipedrive = pipedrive_load_library();
        if (!empty($sync_data->id)) {
          $synced = $pipedrive->{$field['settings']['pipedrive_type']}()
            ->update($sync_data->id, (array) $sync_data);
        }
        else {
          $synced = $pipedrive->{$field['settings']['pipedrive_type']}()
            ->add((array) $sync_data);
        }
      }
      catch (\Benhawker\Pipedrive\Exceptions\PipedriveException $e) {
        watchdog_exception('Pipedrive', $e);
      }

      // Process the response and set the field values accordingly.
      $items[0]['status'] = (int) !empty($synced['success']);
      $items[0]['last_sync'] = time();
      // If this is a new item and the save was a success store the remote id.
      if (!empty($synced['success']) && empty($items[0]['id'])) {
        $items[0]['id'] = $synced['data']['id'];
      }
    }
  }
}

/**
 * Implements hook_field_delete().
 */
function pipedrive_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  // If deletion sync is enabled and there's a remote id - delete.
  if (!empty($instance['settings']['sync_delete']) && !empty($items[0]['id'])) {
    try {
      $pipedrive = pipedrive_load_library();
      $pipedrive->{$field['settings']['pipedrive_type']}()->delete($items[0]['id']);
    }
    catch (\Benhawker\Pipedrive\Exceptions\PipedriveException $e) {
      watchdog_exception('Pipedrive', $e);
    }
  }
}

/**
 * Returns the dynamic fields of a pipedrive data type.
 *
 * The values are cached to reduce the requests to pipedrive and enhance
 * performance.
 *
 * @param string $type
 *   Pipedrive data type (singular). E.g. deal.
 *
 * @return array
 *   Field definition as defined by the pipdrive API.
 */
function pipedrive_get_dynamic_fields($type, $reset = FALSE) {
  $cache = cache_get('pipdrive:dynamic_fields');
  $type = strtolower($type);
  $fields = array();
  if (!empty($cache->data)) {
    $fields = $cache->data;
  }
  if (empty($fields[$type]) || $reset) {
    try {
      $pipedrive = pipedrive_load_library();
      $fields[$type] = array();
      $method = $type . 'Fields';
      if (method_exists($pipedrive, $method)) {
        $response = $pipedrive->$method()->getAll();
        if (!empty($response['success'])) {
          $fields[$type] = $response['data'];
          cache_set('pipdrive:dynamic_fields', $fields);
        }
      }
    }
    catch (\Benhawker\Pipedrive\Exceptions\PipedriveException $e) {
      watchdog_exception('Pipedrive', $e);
    }
  }
  return $fields[$type];
}

/**
 * Map of pipedrive data types to Drupal property types.
 *
 * @param string $pipedrive_type
 *   The pipedrive data type to resolve.
 *
 * @return string|array
 *   The property type of a pipedrive type is given or the whole map.
 */
function pipedrive_datatype_map($pipedrive_type = NULL) {
  $map = array(
    'varchar' => 'text',
    'double' => 'decimal',
    'int' => 'integer',
    'date' => 'date',
    'enum' => 'list',
    'visible_to' => 'integer',
    'monetary' => 'text',
    'picture' => 'text',
    'status' => 'text',
    'phone' => 'text',
    'varchar_auto' => 'text',
    'user' => 'text',
    'stage' => 'text',
    'people' => 'text',
    'address' => 'text',
    'org' => 'text',
  );
  if ($pipedrive_type) {
    if (isset($map[$pipedrive_type])) {
      return $map[$pipedrive_type];
    }
    // @TODO should we simply return text?
    return NULL;
  }
  return $map;
}

/**
 * Normalizes the data built using rules for the sync operation.
 *
 * This is primarily to reset nested objects to the id value.
 *
 * @param object $pipedrive_data
 *   The data object to normalize.
 */
function pipedrive_prepare_sync_data($pipedrive_data) {
  foreach ((array) $pipedrive_data as $property => $value) {
    if (substr($property, -3) == '_id' && is_array($value)) {
      $pipedrive_data->$property = NULL;
      if (isset($value['id'])) {
        $pipedrive_data->$property = $value['id'];
      }
    }
  }
}

/**
 * Normalizes fetched data to be ready for rules.
 *
 * Strangely we need to rename some fetched stuff to make it compatible with the
 * POST structure.
 * - org_id: value -> id.
 *
 * @param object $pipedrive_data
 *   The data object to normalize.
 */
function pipedrive_prepare_fetched_data($pipedrive_data) {
  foreach ((array) $pipedrive_data as $property => $value) {
    switch ($property) {
      case 'org_id':
        $pipedrive_data->{$property}['id'] = $value['value'];
        break;
    }
  }
}